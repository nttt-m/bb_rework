//! SeaORM Entity. Generated by sea-orm-codegen 0.3.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "employees")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub first_name: String,
    pub last_name: String,
    pub position: String,
    pub auth: i32,
    pub address: i32,
    pub contact_number: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::addresses::Entity",
        from = "Column::Address",
        to = "super::addresses::Column::AddressId",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Addresses,
    #[sea_orm(
        belongs_to = "super::authentication::Entity",
        from = "Column::Auth",
        to = "super::authentication::Column::AuthId",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Authentication,
    #[sea_orm(
        belongs_to = "super::telephone_numbers::Entity",
        from = "Column::ContactNumber",
        to = "super::telephone_numbers::Column::TelephoneNumberId",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    TelephoneNumbers,
}

impl Related<super::addresses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Addresses.def()
    }
}

impl Related<super::authentication::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Authentication.def()
    }
}

impl Related<super::telephone_numbers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TelephoneNumbers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
